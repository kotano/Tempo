#:import COLORS tempo.templates.COLORS
#:import utils tempo.utils
##:include tempo/widgets/task.kv

<Widget>:
    # Setting application main font.
    font_name: str(app.ROOT_DIR / 'data' / 'fonts' / 'RobotoMono-Regular')
    # font_name: './data/fonts/RobotoMono-Regular'


<Label>:
    # color: app.colors['text_dark']

<Button>:
    color: app.colors['text_dark']
    background_normal: ''
    background_down: ''
    background_color: app.colors['accent'] if self.state == 'down' else app.colors['button']


<AccentButton@Button>:
    background_color: app.colors['accent'] if self.state == 'normal' else app.colors['button']


<Text>:
    color: app.colors['text_dark']

<ScreenButton>:
    group: 'screen'
    allow_no_selection: False
    background_normal: ''
    background_down: ''
    background_color: app.colors['accent'] if self.state == 'down' else app.colors['button']

<PressableLabel>:
    border: 2, 2, 2, 2
    background_normal: ''
    background_color: app.colors['button']
    color: app.colors['text_dark']

<DefaultInput>:
    background_normal: ''
    color: app.colors['text_dark']
    write_tab: False
    multiline: False
    canvas.after:
        Color:
            rgb: 0.5, 0.5, 0.5
        Line:
            width: 1
            rectangle: self.x, self.y, self.width, self.height

<Box>:
    canvas.after:
        Color:
            rgb: 0.5, 0.5, 0.5
        Line:
            width: 1
            rectangle: self.x, self.y, self.width, self.height

<PressableBoxLayout>:

<DateInput>:
    border: 1, 1, 1, 1

<PrioritySpinner>:
    text_autoupdate: True
    color: app.colors['text_dark']
    values: ('-', '!!!High', '!!Normal', '!Low')
    size_hint_y: None
    height: 40
    background_normal: ''

<TaskHolder>:
    id: taskholder
    spacing: 0, 10
    padding: 10, 10
    cols: 1



<ActionSpinner@Spinner+ActionItem>
    canvas.before:
        Color:
            rgb: 0.128, 0.128, 0.128
        Rectangle:
            size: self.size
            pos: self.pos
    border: 27, 20, 12, 12
    background_normal:
    option_cls:


########### SCREENS #############
# TaskScreen
<TaskScreen>:
    taskholder: taskholder
    BoxLayout:
        orientation: 'vertical'
        padding: 10, 2
        BoxLayout:
            size_hint_y: None
            height: 40
            padding: 0, 2
            canvas:
                Color:
                    rgb: .5, .5, .5
                Line:
                    points: self.x, self.y, self.x + self.width, self.y
                    width: 2
            PressableLabel:
                size_hint_x: 2
                text: 'Taskname'
                on_release: root.sort_tasks(self)
            PressableLabel:
                text: 'Priority'
                on_release: root.sort_tasks(self)
            PressableLabel:
                text: 'Time'
                on_release: root.sort_tasks(self)
            PressableLabel:
                text: 'Deadline'
                on_release: root.sort_tasks(self)

        CustomScroll:
            do_scroll_x: False
            do_scroll_y: True
# Taskholder
            TaskHolder:
                id: taskholder
                size_hint: 1, None
                # height: 50 + self.children[0].height * len(self.children) if len(self.children) else self.parent.height
                # TODO: Find some constant to use instead of magic nums
                height: 50 + 50 * len(self.children)

# TASK #

# Subtask
<Subtask>:
    padding: 5, 5
    background_normal: ''

# TIMERSCREEN
<TimerScreen>:


<MiniTask>:
    size_hint_y: None
    height: 40

    ToggleButton:
        background_normal: ''
        background_down: ''
        background_color: app.colors['accent'] if self.state == 'down' else app.colors['button']
        color: app.colors['text_dark']
        group: 'minitasks'
        allow_no_selection: True
        text: root._name
        on_press:
            if self.state == 'down': app.root.timerscreen.trigger_countdown(root._source);
            self.state = 'down';
            print('Launching timer');
            app.root.ids.actiontitle.title = '  Current task: ' + root._name;


# DIARYSCREEN
<DiaryScreen>:

<Story>:
    canvas.after:
        Color:
            rgb: 0.5, 0.5, 0.5
        Line:
            width: 3
            rectangle: self.x, self.y, self.width, self.height

    orientation: 'vertical'
    size_hint_y: None

<CompletedTask>:
    size_hint: None, None
    height: 30
    width: len(self.text) * 15
    text: self._text

######################## ROOT #########################
# RootWidget:
<RootWidget>
    taskholder: taskscreen.taskholder
    minitaskholder: minitaskholder
    storyholder: storyholder
    taskscreen: taskscreen
    timerscreen: timerscreen
    diaryscreen: diaryscreen

    orientation: 'vertical'
    canvas.before:
        Color:
            rgb: app.colors['background']
        Rectangle:
            size: self.size

# Action bar
    ActionBar:
        height: '50dp'
        background_color: app.colors['accent']
        background_image: ''
        ActionView:
            id: av
            ActionPrevious:
                color: app.colors['text_dark']
                id: actiontitle
                with_previous: False
                title: 'Select task on timer screen to start working'
                # app_icon: str(app.ICONS_DIR / 'logo.png')
                app_icon: str(app.ICONS_DIR / 'logo_dark_50.png')
                # app_icon: str(app.ICONS_DIR / 'logo_blue_50.png')
                on_release: app.open_settings()
                # background_normal: ''
                # background_color: app.colors['accent']
            ActionLabel:
            ActionButton:
                on_release: app.root.add_item()
                icon: str(app.ICONS_DIR / 'plus_icon.png')


# Container
    BoxLayout:
        canvas.before:
            Color:
                rgb: app.colors['background']
            Rectangle:
                size: self.size
# Sidebar
        Box:
            canvas.before:
                Color:
                    rgba: app.colors['button']
                Rectangle:
                    size: self.size
            
            padding: 5, 2
            orientation: 'vertical'
            size_hint_x: None
            size: 63, self.height

            ScreenButton:
                id: taskscreen_button
                on_parent: 
                canvas.after:
                    Rectangle:
                        # Icon size is 50x50
                        size: self.width, 50
                        pos: self.x, self.center_y - 25
                        source: str(app.ICONS_DIR / 'list_icon.png')
                on_release: content_window.current = 'taskscreen'
            ScreenButton:
                id: timerscreen_button
                canvas.after:
                    Rectangle:
                        # Icon size is 50x50
                        size: self.width, 50
                        pos: self.x, self.center_y - 25
                        source: str(app.ICONS_DIR / 'timer_icon.png')
                on_release:
                    content_window.current = 'timerscreen';
                    root.populate_minitasks(minitaskholder)
# Disabled
            ScreenButton:
                disabled: True
                id: calendarscreen_button
                canvas.after:
                    Rectangle:
                        # Icon size is 50x50
                        size: self.width, 50
                        pos: self.x, self.center_y - 25
                        source: str(app.ICONS_DIR / 'calendar_icon.png')
                on_release: content_window.current = 'calendarscreen'
            ScreenButton:
                id: diaryscreen_button
                canvas.after:
                    Rectangle:
                        # Icon size is 50x50
                        size: self.width, 50
                        pos: self.x, self.center_y - 25
                        source: str(app.ICONS_DIR / 'diary_icon.png')
                on_release:
                    content_window.current = 'diaryscreen';
                    # storyholder.height = root.collect_height(storyholder, 50);
# CONTENT
        MyScreenManager:
            id: content_window
            # current: app.defaultscreen
            on_parent: root.switch_screen(app.defaultscreen)
            spacing: 0, 10
            padding: 10, 10
            cols: 1
# TASKS
            TaskScreen:
                id: taskscreen
                name: 'taskscreen'
# TIMER
            TimerScreen:
                id: timerscreen
                name: 'timerscreen'
                timerdisplay: timerdisplay
                minitaskholder: minitaskholder

                pomoduration: app.pomoduration
                pomorest: app.pomorest
                worktime: app.worktime
                display: self.pomoduration, '00'

                BoxLayout:
                    CustomScroll:
                        do_scroll_x: False
                        do_scroll_y: True
                        GridLayout:
                            id: minitaskholder
                            size_hint_y: None
                            cols: 1
                            padding: 10
                            spacing: 5
                            height: 100 + 40 * len(self.children)

                    Box:
                        orientation: 'vertical'
                        LongpressButton:
                            canvas:
                                Color:
                                    # rgba: 1, .1, 0, 0.5
                                    rgba: app.colors['accent'][:3] + [0.6]
                                Ellipse:
                                    pos: self.center_x  - self.width / 4, self.center_y - self.width / 4
                                    size: self.width / 2, self.width / 2
                                    angle_start: 0
                                    angle_end: timerscreen.angle

                            color: app.colors['text_dark']
                            id: timerdisplay
                            text: '{}:{}'.format(*timerscreen.display)
                            on_press: timerscreen.trigger_countdown(timerscreen.current_task)
                            on_long_press:
                                timerscreen.force_stop();
                                app.root.ids.actiontitle.title = 'No active tasks'
                            background_color: app.colors['accent'] if self.state == 'down' else app.colors['background']

# CALENDAR
            CalendarScreen:
                id: calendarscreen
                name: 'calendarscreen'
                BoxLayout:
                    CalendarView:
                        strip: False
                        halign: 'right'
                        color: app.colors['text_dark']
                        text: (self.endar)
# DIARY
            DiaryScreen:
                id: diaryscreen
                storyholder: storyholder
                name: 'diaryscreen'
                Box:
                    orientation: 'vertical'
                    # Button:
                    #     size_hint_y: 0.1
                    #     text: 'Add new story'
                    #     background_normal: ''
                    #     background_color: app.colors['accent']
                    #     color: app.colors['text_dark'] 
                    #     on_press:
                    #         app.root.print_message('Adding new story');
                    #         diaryscreen.add_story()
                    CustomScroll:
# Storyholder
                        Storyholder:
                            id: storyholder
                            cols: 1
                            orientation: 'vertical'
                            padding: 40
                            spacing: 10
                            size_hint: 1, None
                            height: 200 + sum(x.height for x in self.children)
