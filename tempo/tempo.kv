#:import COLORS tempo.templates.COLORS
#:import dates tempo.dates

<Widget>:
    # Setting application main font
    font_name: './data/fonts/RobotoMono-Regular'


<Text@Label>
    color: COLORS['TextColor']

<ScreenButton@ToggleButton>:
    group: 'screen'
    allow_no_selection: False
    background_normal: ''

<PressableLabel>:
    background_normal: ''
    color: 0, 0, 0, 1

<DefaultInput@TextInput>:
    background_normal: ''
    write_tab: False
    multiline: False
    canvas.after:
        Color:
            rgba: 0.5, 0.5, 0.5, 1
        Line:
            width: 1
            rectangle: self.x, self.y, self.width, self.height

<Box>:
    canvas.after:
        Color:
            rgba: 0.5, 0.5, 0.5, 1
        Line:
            width: 1
            rectangle: self.x, self.y, self.width, self.height

<PressableBoxLayout>:

<DateInput@DefaultInput>:
    border: 1, 1, 1, 1


<PrioritySpinner@Spinner>:
    text_autoupdate: True
    color: 0, 0, 0, 1
    values: ('-', '!!!High', '!!Normal', '!Low')
    size_hint_y: None
    height: 40
    background_normal: ''

<TaskHolder@GridLayout>:
    id: taskholder
    spacing: 0, 10
    padding: 10, 10
    cols: 1



<ActionSpinner@Spinner+ActionItem>
    canvas.before:
        Color:
            rgba: 0.128, 0.128, 0.128, 1
        Rectangle:
            size: self.size
            pos: self.pos
    border: 27, 20, 12, 12
    background_normal:
    option_cls:


########### SCREENS #############
# TaskScreen
<TaskScreen>:
    taskholder: taskholder
    BoxLayout:
        orientation: 'vertical'
        padding: 10
        Button:
            size_hint_y: None
            height: 40
            text: 'Add new task'
            on_release: root.add_new_task()
        BoxLayout:
            size_hint_y: None
            height: 40
            padding: 0, 2
            canvas:
                Color:
                    rgb: .5, .5, .5, 1
                Line:
                    points: self.x, self.y, self.x + self.width, self.y
                    width: 2
            PressableLabel:
                size_hint_x: 2
                text: 'Taskname'
                on_release: root.sort_tasks(self)
            PressableLabel:
                text: 'Priority'
                on_release: root.sort_tasks(self)
            PressableLabel:
                text: 'Time'
                on_release: root.sort_tasks(self)
            PressableLabel:
                text: 'Deadline'
                on_release: root.sort_tasks(self)

        CustomScroll:
            do_scroll_x: False
            do_scroll_y: True
# Taskholder
            TaskHolder:
                id: taskholder
                size_hint: 1, None
                # height: 50 + self.children[0].height * len(self.children) if len(self.children) else self.parent.height
                # TODO: Find some constant to use instead of magic nums
                height: 50 + 50 * len(self.children)

# TASK #
<Task>:
    size_hint_y: None
    canvas:
        Color:
            rgb: .5, .5, .5, 1
        Line:
            points: self.x, self.y - 4, self.x + self.width, self.y -4
            width: 1
    size_hint_y: None
    height: 40

# Subtask
<Subtask>:
    padding: 5, 5
    background_normal: ''

# TIMERSCREEN
<TimerScreen>:


<MiniTask>:
    size_hint_y: None
    height: 40
    # CheckBox:
    ToggleButton:
        group: 'minitasks'
        allow_no_selection: True
        text: root._name
        on_press:
            if self.state == 'down': app.root.timerscreen.trigger_countdown(root._source);
            self.state = 'down';
            print('Launching timer');
            app.root.ids.actiontitle.title = '  Current task: ' + root._name;


# DIARYSCREEN
<DiaryScreen>:

<Story>:
    canvas.after:
        Color:
            rgba: 0.5, 0.5, 0.5, 1
        Line:
            width: 3
            rectangle: self.x, self.y, self.width, self.height

    orientation: 'vertical'
    size_hint_y: None

<CompletedTask>:
    size_hint: None, None
    height: 30
    width: len(self.text) * 15
    text: self._text

######################## ROOT #########################
# RootWidget:
<RootWidget>
    taskholder: taskscreen.taskholder
    minitaskholder: minitaskholder
    storyholder: storyholder
    taskscreen: taskscreen
    timerscreen: timerscreen
    diaryscreen: diaryscreen

    orientation: 'vertical'
    canvas.before:
        Color:
            rgb: 1, 1, 1
        Rectangle:
            size: self.size

# Action bar
    ActionBar:
        # size_hint_y: 0.2
        height: '50dp'
        # background_color: .70, .88, .87, .9
        # background_image: ''
        ActionView:
            id: av
            ActionPrevious:
                id: actiontitle
                with_previous: False
                title: 'Select task on timer screen to start working'
                app_icon: './data/icons/logo.png'
                on_release:
                background_normal: ''
            ActionLabel:


# Container
    BoxLayout:
        canvas.before:
            Color:
                rgb: 1, 1, 1, 1
            Rectangle:
                size: self.size
# Sidebar
        Box:
            padding: 5, 10
            orientation: 'vertical'
            size_hint_x: None
            size: 70, self.height

            ScreenButton:
                id: list_button
                on_parent: self.state = 'down'
                canvas.after:
                    Rectangle:
                        # Icon size is 50x50
                        size: self.width, 50
                        pos: self.x, self.center_y - 25
                        source: './data/icons/list_icon.png'
                on_release: content_window.current = 'taskscreen'
            ScreenButton:
                id: timer_button
                canvas.after:
                    Rectangle:
                        # Icon size is 50x50
                        size: self.width, 50
                        pos: self.x, self.center_y - 25
                        source: './data/icons/timer_icon.png'
                on_release:
                    content_window.current = 'timerscreen';
                    root.populate_minitasks(minitaskholder)
            ScreenButton:
                id: calendar_button
                canvas.after:
                    Rectangle:
                        # Icon size is 50x50
                        size: self.width, 50
                        pos: self.x, self.center_y - 25
                        source: './data/icons/calendar_icon.png'
                on_release: content_window.current = 'calendarscreen'
            ScreenButton:
                id: diary_button
                canvas.after:
                    Rectangle:
                        # Icon size is 50x50
                        size: self.width, 50
                        pos: self.x, self.center_y - 25
                        source: './data/icons/diary_icon.png'
                on_release:
                    content_window.current = 'diaryscreen';
                    # storyholder.height = root.collect_height(storyholder, 50);
# CONTENT
        MyScreenManager:
            id: content_window
            current: root.diaryscreen.name
            spacing: 0, 10
            padding: 10, 10
            cols: 1
# TASKS
            TaskScreen:
                id: taskscreen
                name: 'taskscreen'
# TIMER
            TimerScreen:
                id: timerscreen
                name: 'timerscreen'
                timerdisplay: timerdisplay
                minitaskholder: minitaskholder
                BoxLayout:
                    CustomScroll:
                        do_scroll_x: False
                        do_scroll_y: True
                        GridLayout:
                            id: minitaskholder
                            size_hint_y: None
                            cols: 1
                            padding: 10
                            height: 100 + 40 * len(self.children)

                    Box:
                        orientation: 'vertical'
                        LongpressButton:
                            canvas:
                                Color:
                                    rgba: 1, .1, 0, 0.5
                                Ellipse:
                                    pos: self.center_x  - self.width / 4, self.center_y - self.width / 4
                                    size: self.width / 2, self.width / 2
                                    # source: './data/icons/logo.png'
                                    angle_start: 0
                                    angle_end: timerscreen.angle

                            color: COLORS['TextColor']
                            id: timerdisplay
                            text: '{}:{}'.format(*timerscreen.display)
                            on_press: timerscreen.trigger_countdown(timerscreen.current_task)
                            on_long_press:
                                timerscreen.stop_timer();
                                app.root.ids.actiontitle.title = 'No active tasks'
                            background_normal: ''

# CALENDAR
            CalendarScreen:
                id: calendarscreen
                name: 'calendarscreen'
                BoxLayout:
                    CalendarView:
                        strip: False
                        halign: 'right'
                        color: 0, 0, 0, 1
                        text: (self.endar)
# DIARY
            DiaryScreen:
                id: diaryscreen
                storyholder: storyholder
                name: 'diaryscreen'
                Box:
                    orientation: 'vertical'
                    Button:
                        size_hint_y: 0.1
                        text: 'Add new story'
                        on_press:
                            app.root.print_message('Adding new story');
                            diaryscreen.add_story()
                    CustomScroll:
# Storyholder
                        Storyholder:
                            id: storyholder
                            cols: 1
                            orientation: 'vertical'
                            padding: 40
                            spacing: 10
                            size_hint: 1, None
                            height: 200 + sum(x.height for x in self.children)
                            # on_children:
                                # self.height = app.root.collect_height(self);
                                # diaryscreen.count_postnum();
