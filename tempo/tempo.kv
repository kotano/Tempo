#:import COLORS tempo.templates.COLORS
#:import POMODORO_DURATION tempo.dates.POMODORO_DURATION

<Text@Label>
    color: COLORS['TextColor']

<PaddedButton@Button>:
    padding: 5, 10

<PressableLabel>:
    background_normal: ''
    color: 0, 0, 0, 1

<DefaultInput@TextInput>:
    background_normal: ''
    write_tab: False
    multiline: False
    canvas.after:
        Color:
            rgba: 0.5, 0.5, 0.5, 1
        Line:
            width: 1
            rectangle: self.x, self.y, self.width, self.height

<Box@BoxLayout>:
    canvas.after:
        Color:
            rgba: 0.5, 0.5, 0.5, 1
        Line:
            width: 1
            rectangle: self.x, self.y, self.width, self.height

<PressableBoxLayout>:

<DateInput@DefaultInput>:
    border: 1, 1, 1, 1


<PrioritySpinner@Spinner>:
    text_autoupdate: True
    color: 0, 0, 0, 1
    values: ('-', '!!!High', '!!Normal', '!Low')
    size_hint_y: None
    height: 40
    background_normal: ''

<TaskHolder@GridLayout>:
    id: taskholder
    spacing: 0, 10
    padding: 10, 10
    cols: 1

<ActionSpinner@Spinner+ActionItem>
    canvas.before:
        Color:
            rgba: 0.128, 0.128, 0.128, 1
        Rectangle:
            size: self.size
            pos: self.pos
    border: 27, 20, 12, 12
    background_normal:
    option_cls:


########### SCREENS #############
# TaskScreen
<TaskScreen>:
    taskholder: taskholder
    BoxLayout:
        orientation: 'vertical'
        padding: 10
        Button:
            size_hint_y: None
            height: 40
            text: 'Add new task'
            on_release: root.add_new_task()
        BoxLayout:
            size_hint_y: None
            height: 40
            padding: 0, 2
            canvas:
                Color:
                    rgb: .5, .5, .5, 1
                Line:
                    points: self.x, self.y, self.x + self.width, self.y
                    width: 2
            PressableLabel:
                size_hint_x: 2
                text: 'Taskname'
                on_release: root.sort_tasks(self)
            PressableLabel:
                text: 'Priority'
                on_release: root.sort_tasks(self)
            PressableLabel:
                text: 'Time'
                on_release: root.sort_tasks(self)
            PressableLabel:
                text: 'Deadline'
                on_release: root.sort_tasks(self)

        CustomScroll:
            do_scroll_x: False
            do_scroll_y: True
# Taskholder
            TaskHolder:
                id: taskholder
                size_hint: 1, None
                # height: 50 + self.children[0].height * len(self.children) if len(self.children) else self.parent.height
                # TODO: Find some constant to use instead of magic nums
                height: 50 + 50 * len(self.children)

# TASK #
<Task>:
    size_hint_y: None
    canvas:
        Color:
            rgb: .5, .5, .5, 1
        Line:
            points: self.x, self.y - 4, self.x + self.width, self.y -4
            width: 1
    size_hint_y: None
    height: 40

# Subtask
<Subtask>:
    padding: 5, 5
    background_normal: ''

# Timer screen
<TimerScreen>:


<MiniTask>:
    size_hint_y: None
    height: 40
    # CheckBox:
    Button:
        text: root._name
        on_press:
            print('Launching timer');
            app.root.timerscreen.trigger_countdown(root._source);


######################## ROOT #########################
# RootWidget:
<RootWidget>
    taskholder: taskscreen.taskholder
    minitaskholder: minitaskholder
    taskscreen: taskscreen
    timerscreen: timerscreen

    orientation: 'vertical'
    canvas.before:
        Color:
            rgb: 1, 1, 1
        Rectangle:
            size: self.size
    ActionBar:
        # size_hint_y: 0.2
        height: '50dp'
        # background_color: .70, .88, .87, .9
        # background_image: ''
        ActionView:
            id: av
            ActionPrevious:
                with_previous: False
                title: ''
                app_icon: './docs/sources/logo.png'
                on_release:
                background_normal: ''

# Container
    BoxLayout:
        canvas.before:
            Color:
                rgb: 1, 1, 1, 1
            Rectangle:
                size: self.size
# Sidebar
        Box:
            padding: 10
            orientation: 'vertical'
            size_hint_x: None
            size: 70, self.height

            PaddedButton:
                text: 'Tasks'
                on_release: content_window.current = 'taskscreen'
            PaddedButton:
                text: 'Timer'
                on_release: content_window.current = 'timerscreen'
            PaddedButton:
                text: 'Calendar'
                on_release: content_window.current = 'calendarscreen'
            PaddedButton:
                text: 'Diary'
                on_release: content_window.current = 'diaryscreen'
# CONTENT
        MyScreenManager:
            id: content_window
            spacing: 0, 10
            padding: 10, 10
            cols: 1
# Tasks
            TaskScreen:
                id: taskscreen
                name: 'taskscreen'
# Timer
            TimerScreen:
                id: timerscreen
                name: 'timerscreen'
                timerdisplay: timerdisplay
                BoxLayout:
                    GridLayout:
                        id: minitaskholder
                        cols: 1
                        padding: 10
                        on_parent: root.load_minitasks(self)

                    Box:
                        orientation: 'vertical'
                        # PressableLabel:
                        LongpressButton:
                            canvas:
                                Color:
                                    rgba: 1, .1, 0, 0.5
                                Ellipse:
                                    pos: self.center_x  - self.width / 4, self.center_y - self.width / 4
                                    size: self.width / 2, self.width / 2
                                    # source: './docs/sources/logo.png'
                                    angle_start: 0
                                    angle_end: timerscreen.angle

                            color: COLORS['TextColor']
                            id: timerdisplay
                            text: '{}:{}'.format(*timerscreen.display)
                            on_press: timerscreen.trigger_countdown(timerscreen.current_task)
                            on_long_press: timerscreen._stop_timer()
                            background_normal: ''
                        # Button:
                        #     text: 'Start timer'
# Calendar
            CalendarScreen:
                id: calendarscreen
                name: 'calendarscreen'
                BoxLayout:
                    Text:
                        text: 'Calendar Screen. Coming soon'
# Dictionary
            DiaryScreen:
                id: diaryscreen
                name: 'diaryscreen'
                BoxLayout:
                    Text:
                        text: 'Diary Screen. Coming soon'

